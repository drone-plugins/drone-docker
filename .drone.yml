workspace:
  base: /go
  path: src/github.com/drone-plugins/drone-docker

pipeline:
  dep:
    image: golang:1.11
    commands:
      - go get -u github.com/golang/dep/cmd/dep
      - dep ensure

  fmt:
    image: golang:1.11
    group: validate
    commands:
      - GOFILES_NOVENDOR=$(find . -type f -name '*.go' -not -path "./vendor/*")
      - gofmt -l -s -e $GOFILES_NOVENDOR
      - exit $(gofmt -l -s -e $GOFILES_NOVENDOR | wc -l)

  lint:
    image: golang:1.11
    group: validate
    commands:
      - go get -u golang.org/x/lint/golint
      - golint -set_exit_status

  test:
    image: golang:1.11
    group: validate
    commands:
      - go test -cover ./...

  vet:
    image: golang:1.11
    group: validate
    commands:
      - go vet ./...

  build:
    image: golang:1.11
    commands:
      - sh .drone.sh

  publish:
    image: plugins/docker
    repo: plugins/docker
    tags: [ "latest", "17", "17.12" ]
    secrets: [ docker_username, docker_password ]
    dockerfile: docker/Dockerfile
    when:
      branch: master
      event: push

  publish_heroku:
    image: plugins/docker
    repo: plugins/heroku
    tags: [ "latest", "17", "17.12" ]
    secrets: [ docker_username, docker_password ]
    dockerfile: docker/heroku/Dockerfile
    when:
      branch: master
      event: push

  publish_gcr:
    image: plugins/docker
    repo: plugins/gcr
    tags: [ "latest", "17", "17.10" ]
    secrets: [ docker_username, docker_password ]
    dockerfile: docker/gcr/Dockerfile
    when:
      branch: master
      event: push

  publish_ecr:
    image: plugins/docker
    repo: plugins/ecr
    tags: [ "latest", "17", "17.10" ]
    secrets: [ docker_username, docker_password ]
    dockerfile: docker/ecr/Dockerfile
    when:
      branch: master
      event: push
